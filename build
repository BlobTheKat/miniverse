#!/usr/bin/sh

# Prepare build opts
GCC_OPTS="-Wno-overflow -fwrapv -Wno-narrowing"
if [ "$OSTYPE" = "msys" ]; then
	if ! cmake --version >/dev/null; then scoop install cmake; fi
	if ! upx -V >/dev/null; then scoop install upx; fi
	if ! g++ -v 2>/dev/null; then scoop install mingw; fi

	SDL_STATIC_LINK_FLAGS="-L.bin/lib -lmingw32 -lSDL2 -lSDL2main -Wl,--dynamicbase -Wl,--nxcompat -Wl,--high-entropy-va -lm -ldinput8 -ldxguid -ldxerr8 -luser32 -lgdi32 -lwinmm -limm32 -lole32 -loleaut32 -lshell32 -lsetupapi -lversion -luuid -static -Dmain=SDL_main"
	if [ "$1" ]; then
	GCC_OPTS="$GCC_OPTS .icon.res -O3 -mwindows -DRELEASE=$1"
	postbuild="upx --best main.exe"
	if [ ! -f icon.ico ]; then
	echo -e "\033[mWarning: no icon.ico found. Building without an icon...\033[m"
	else
	echo "id ICON icon.ico" > .rc
	windres .rc -O coff -o .icon.res
	rm .rc
	fi; fi
	winmf='-G "MinGW Makefiles"'
else
	lxdeps="sudo apt-get install libasound2-dev libpulse-dev cmake upx"
	SDL_STATIC_LINK_FLAGS="-L.bin/lib -lSDL2 -lSDL2main -ldl -pthread"
	if [ "$1" ]; then
	GCC_OPTS="$GCC_OPTS -O3 -DRELEASE=$1"
	postbuild="upx --best main"
	fi
fi

# Say NO to windows build system
if [ ! -d .bin ]; then
rm -rf .bin2
mkdir .bin2
git clone https://github.com/BlobTheKat/glad-everywhere
mv glad-everywhere/include .bin2
mv glad-everywhere/src .bin2
rm -rf glad-everywhere
git clone -b SDL2 https://github.com/libsdl-org/SDL
$lxdeps
cmake $winmf -S SDL -B SDL/build -DCMAKE_BUILD_TYPE=Release -DSDL_STATIC=ON -DSDL_SHARED=OFF -DSDL_DYNAMIC_API=OFF -DSDL_RENDER_DISABLED=ON -DSDL_RENDER_D3D=OFF -DSDL_RENDER_METAL=OFF -DSDL_VULKAN=OFF -DSDL_TEST=OFF && cmake --build SDL/build --config Release --parallel || exit
mv SDL/build/include/* .bin2/include
mkdir .bin2/lib
mv SDL/build/*.a .bin2/lib
rm -rf SDL
mv .bin2 .bin
fi

# Build
#clear
g++ -fno-rtti -flto -I.bin/include -Wfatal-errors -std=c++20 src/main.cpp .bin/src/gl.c -Wl,--strip-all -ffunction-sections $GCC_OPTS $SDL_STATIC_LINK_FLAGS -Wl,--gc-sections -Wl,--format=binary -Wl,$(find assets/*) -Wl,--format=default -o main
A=$?

if [ -f .icon.res ]; then rm .icon.res; fi

# Run executable after a successful build
if [ $A -eq 0 ]; then
$postbuild
echo -e "\033[32mBuild successful. Enter argv and hit enter to run\033[m"
read A; clear
./main $A
fi